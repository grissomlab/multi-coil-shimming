function [generalInfo_stc, imageInfo_sa] = getParInfo(file_s)% Usage: [generalInfo_stc, imageInfo_sa] = getParInfo(file_s)%%   getParInfo reads Philips PAR files and returns parameters in% a structure (general info) and structure array (image info). The % generalInfo structure has field names derived from the PAR file % general information parameters (spaces are replaced by underscores,% periods are dropped, and any other non-alphabetical character% terminates the field name and is not included).%   Image information is returned in the imageInfo_sa structure% array (one element per image), where the nth element of the% array describes the nth image in the REC file. Fields of the% imageInfo structures are hard-coded to match the current% order defined in the PAR files.%   Reading all the imageInfo can be time consuming in some cases.% If the call to getParInfo only specifies one output argument, as% in%       genInfo_stc = getParInfo(file_s);%% then this routine exits without making imageInfo_sa.%% Last modified: 2004/12/21 (AWA)% For script execution:% file_s = ['C:\Documents and Settings\Saikat Sengupta\My Documents\Work\Philips Shimming\AS Shim\Philips_Visit_Dr Foxall_Oct 2006\Philips_Shim_10_17_2006\saikat_2_1.par'];                %%%% ONLY VALID FOR V3 FILES %%%%%% Preliminaries:genStart_s = '.    ';genDivide_s = ':';versionTag_s = 'Research image export tool';% Read file into string:fid=fopen(file_s, 'r', 'l');while 1    % Get next line (not including end-of-line character):    line_s = fgetl(fid);    % Break at end-of-file (line_s = -1):    if ~ischar(line_s)        break    end    % For testing:    %disp(line_s)        % If line begins with a hash, #, then it's a comment.     % Ignore zero length lines:    if (length(line_s) > 0 & strcmp(line_s(1), '#'))        % It's a comment line, search for version number:        if ~isempty(findstr(line_s, versionTag_s))            index = findstr(line_s, 'V');            version_s = line_s(index:length(line_s));            generalInfo_stc.version = version_s;        end            % If line begins with genStart_s, then it holds "general" information:    elseif (findstr(line_s, genStart_s) == 1)        % Capture parameter in generalInfo_stc. First find genDivide_s:        divideIndex = findstr(line_s, genDivide_s);        % Generate field name--this is everything between genStart_s and         % first non-alpha, non-space character:        op_s = [];        for cIndex = (length(genStart_s)+1):divideIndex            char_s = line_s(cIndex);            if isAlpha(char_s)                % Echo character to output string:                op_s = [op_s, char_s];            elseif strcmp(char_s, '.')                % Do not send '.' to op_s.            elseif strcmp(char_s, ' ')                % Replace space with underscore:                op_s = [op_s, '_'];            else                break            end        end     % End of cIndex FOR.                % Remove trailing non-alphabetic characters:        lastAlphaIndex = max(find(isAlpha(op_s)));        field_s = op_s(1:lastAlphaIndex);        % Find the value string for this field:        fullValue_s = line_s((divideIndex+1):length(line_s));        % Discard leading and trailing spaces:        valueIndex_v = find(~isTargetChar(fullValue_s, ' '));   % Indices of non-spaces.        minIndex = min(valueIndex_v) + divideIndex;        maxIndex = max(valueIndex_v) + divideIndex;        value_s = line_s(minIndex:maxIndex);        % If value_s contains any character besides numerals, periods, hyphens and        % spaces, then don't convert it to a number (i.e., keep it in string        % format):        if all(isNumeral(value_s) | isTargetChar(value_s, '.') | ...                isTargetChar(value_s, '-') | isTargetChar(value_s, ' '))            value = str2num(value_s);        else            value = value_s;        end        % Add field to generalInfo_stc using a dynamic field name:        generalInfo_stc.(field_s) = value;            % Test for imageInfo line. If the first non-space character is a    % numeral, it's an imageInfo line:    elseif isNumeral(line_s(min(find(~isTargetChar(line_s, ' ')))))        % If number of output arguments is 1, we don't need the imageInfo.        % Since it's time consuming to read many lines of image info, just        % return:        if (nargout == 1)            return        else            % Get the image information:            a_v = str2num(line_s);            image = a_v(7) + 1;     % Index in REC file + 1 = index in structure array.            % Load imageInfo structure. Assume order of entries is fixed:            imageInfo_sa(image).slice_number = a_v(1);            imageInfo_sa(image).echo_number = a_v(2);            imageInfo_sa(image).dynamic_scan_number = a_v(3);            imageInfo_sa(image).cardiac_phase_number = a_v(4);            imageInfo_sa(image).image_type_mr = a_v(5);            imageInfo_sa(image).scanning_sequence = a_v(6);            imageInfo_sa(image).index_in_REC_file = a_v(7);     % Redundant, but clear.            imageInfo_sa(image).rescale_intercept = a_v(8);            imageInfo_sa(image).rescale_slope = a_v(9);            imageInfo_sa(image).scale_slope = a_v(10);            imageInfo_sa(image).window_center = a_v(11);            imageInfo_sa(image).window_width = a_v(12);            imageInfo_sa(image).image_angulation = a_v(13:15);            imageInfo_sa(image).image_offcentre = a_v(16:18);            imageInfo_sa(image).image_display_orientation = a_v(19);            imageInfo_sa(image).slice_orientation = a_v(20);            imageInfo_sa(image).fmri_status_indication = a_v(21);            imageInfo_sa(image).image_type_ed_es = a_v(22);            imageInfo_sa(image).pixel_spacing = a_v(23:24);            imageInfo_sa(image).echo_time = a_v(25);            imageInfo_sa(image).dyn_scan_begin_time = a_v(26);            imageInfo_sa(image).trigger_time = a_v(27);            imageInfo_sa(image).diffusion_b_factor = a_v(28);            imageInfo_sa(image).image_flip_angle = a_v(29);        end % of nargout IF.            end     % End of genStart IF.end         % End of infinite WHILE.fclose(fid);% ------------------- Define subfunctions -------------------function logic_v = isAlpha(ip_s)% Usage: logic_v = isAlpha(ip_s)%   isAlpha returns a 1 where the elements of ip_s are alphabetical% characters, and 0 otherwise.%% Test ASCII codes:ascii_v = abs(ip_s);logic_v = (ascii_v >= abs('a') & ascii_v <= abs('z')) | ...    (ascii_v >= abs('A') & ascii_v <= abs('Z'));function logic_v = isNumeral(ip_s)% Usage: logic_v = isNumeral(ip_s)%   isNumeral returns a 1 where the elements of ip_s are numerical% characters, and 0 otherwise.%% Test ASCII codes:ascii_v = abs(ip_s);logic_v = (ascii_v >= abs('0') & ascii_v <= abs('9'));function logic_v = isTargetChar(ip_s, target_s)% Usage: logic_v = isTargetChar(ip_s, target_s)%   isTargetChar returns a 1 where the elements of ip_s are the% target character (in target_s), and 0 otherwise.%% Test for equality of ASCII codes:ascii_v = abs(ip_s);logic_v = (ascii_v == abs(target_s));